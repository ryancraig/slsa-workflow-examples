name: Release OCI Container

on:
  push:
    tags:
      - v**

env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build our OCI container image, push it to the OCI container registry, and output the repo hash digest.
  build:
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v2.3.4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # v2.0.0

      - name: Authenticate Docker
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # v2.0.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a # v4.0.1
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          # generate OCI container image tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha, prefix=commit-sha-
          labels: |
            label "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
            label "org.opencontainers.image.created=$(date --iso-8601=seconds)" \
            label "org.opencontainers.image.title=slsa-workflow-examples-docker" \
            label "org.opencontainers.image.revision=${revision}" \
            label "org.opencontainers.image.version=${GITHUB_REF_NAME}" \
            label "org.opencontainers.image.licenses=MIT" \
            label "org.opencontainers.image.vendor=Ryan Craig"


      - name: Build and push Docker image
        uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8 # v3.0.0
        id: build
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output image
        id: image
        run: |
          # NOTE: Set the image as an output because the `env` context is not
          # available to the inputs of a reusable workflow call.
          image_name="${IMAGE_REGISTRY}/${IMAGE_NAME}"
          echo "image=$image_name" >> "$GITHUB_OUTPUT"
  # Sign the image digest and push it to the OCI container registry        
  sign:
    runs-on: ubuntu-22.04
    needs: [build]

    permissions:
      packages: write
      id-token: write

    env:
      IMAGE_DIGEST: ${{ needs.build.outputs.image-digest }}

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.0.3
        with:
          cosign-release: v2.0.2

      - name: Login to ghcr.io
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign image
        run: |
          echo "y" | cosign sign "${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}"
          echo "::notice title=Verify signature::COSIGN_EXPERIMENTAL=1 cosign verify ${{ needs.build.outputs.image }}:${GITHUB_REF_NAME} | jq '.[0]'"
          echo "::notice title=Download signatures::COSIGN_EXPERIMENTAL=1 cosign download signature ${{ needs.build.outputs.image }}:${GITHUB_REF_NAME} | jq -s ."
          echo "::notice title=Inspect signature bundle::COSIGN_EXPERIMENTAL=1 cosign download signature ${{ needs.build.outputs.image }}:${GITHUB_REF_NAME} | jq -s '.Bundle.Payload.body |= @base64d | .[0].Bundle.Payload.body | fromjson'"
          echo "::notice title=Inspect certificates::COSIGN_EXPERIMENTAL=1 cosign download signature ${{ needs.build.outputs.image }}:${GITHUB_REF_NAME} | jq -r '.Bundle.Payload.body |= @base64d | .Bundle.Payload.body | fromjson | .spec.signature.publicKey.content |= @base64d | .spec.signature.publicKey.content' | openssl x509 -text"
  # Create and sign the the image SBOM and push it to the OCI container registry 
  sbom:
    runs-on: ubuntu-22.04
    needs: [build]

    permissions:
      packages: write
      id-token: write

    env:
      IMAGE_DIGEST: ${{ needs.build.outputs.image-digest }}

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.0.3
        with:
          cosign-release: v2.0.2

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.14.1

      - name: Login to ghcr.io
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate SBOM for the OCI image
        run: |
          syft packages "${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}" -o spdx-json > ${{ needs.build.outputs.digest }}.sbom.spdx.json

      - name: Attach SBOM to the OCI image
        run: |
          cosign attach sbom --sbom ${{ needs.build.outputs.digest }}.sbom.spdx.json "${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}"
      
      - name: Sign SBOM
        run: |
          echo "y" | COSIGN_EXPERIMENTAL=1 cosign sign --attachment sbom ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}

      - name: Verify SBOM signature
        run: |
          MODIFIED_DIGEST=$(echo "${{ needs.build.outputs.digest }}" | sed 's/sha256:/sha256-/')
          echo $MODIFIED_DIGEST
          COSIGN_EXPERIMENTAL=1 cosign verify --certificate-identity ryan.s.craig@gmail.com --certificate-oidc-issuer-regexp https://github.com/ryancraig/slsa-workflow-examples/.* ${{ needs.build.outputs.image }}:$MODIFIED_DIGEST.sbom

          # echo "::notice title=Verify SBOM signature::COSIGN_EXPERIMENTAL=1 cosign verify --attachment sbom ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}.sbom"

  # # Generate supply chain provenance and push it to the OCI container registry.
  # provenance:
  #   needs: [build]
  #   permissions:
  #     actions: read # for detecting the Github Actions environment.
  #     id-token: write # for creating OIDC tokens for signing.
  #     packages: write # for uploading attestations.
  #   if: startsWith(github.ref, 'refs/tags/')
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.5.0
  #   with:
  #     image: ${{ needs.build.outputs.image }}
  #     digest: ${{ needs.build.outputs.digest }}
  #     registry-username: ${{ github.actor }}
  #   secrets:
  #     registry-password: ${{ secrets.GITHUB_TOKEN }}

  # inspection:
  #   needs: [build,provenance]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install SLSA verifier
  #       uses: slsa-framework/slsa-verifier/actions/installer@v2.2.0

  #     - name: Install cosign
  #       uses: sigstore/cosign-installer@v3.0.3
  #       with:
  #         cosign-release: v2.0.2

  #     - name: Install jq
  #       run: sudo apt-get update && sudo apt-get install jq

  #     - name: Cosign tree
  #       run: cosign tree ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}

  #     - name: Cosign download attestation and inspect SLSA provenance payload
  #       # run: cosign download attestation ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }} | jq -r '.payload' | base64 -d | jq
  #       run: |
  #         cosign download attestation ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }} | \
  #         jq -r '.payload' | base64 -d | jq 'select(.predicateType == "https://slsa.dev/provenance/v0.2")'

  #     - name: Verify image using slsa-verifier
  #       run: |
  #         slsa-verifier verify-image ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }} \
  #             --source-uri "github.com/${{ github.repository }}" \
  #             --source-tag ${{ github.ref_name }}




